{"version":3,"sources":["core/xApi/statements/utils/dateTimeConverter.ts","core/xApi/statements/xapiEntityFactory.ts","core/xApi/tinCan.ts","core/xApi/statements/dataBuilders/section.ts","core/xApi/statements/dataBuilders/questions/multipleChoice.ts","core/xApi/statements/dataBuilders/questions/fillInTheBlanks.ts","core/xApi/statements/dataBuilders/questions/openQuestion.ts","core/xApi/statements/dataBuilders/questions/statement.ts","core/xApi/statements/dataBuilders/questions/rankingText.ts","core/xApi/statements/dataBuilders/questions/textMatching.ts","core/xApi/statements/dataBuilders/questions/scenario.ts","core/xApi/statements/dataBuilders/questions/dragAndDrop.ts","core/xApi/statements/dataBuilders/questions/hotspot.ts","core/xApi/statements/dataBuilders/questions/index.ts","core/xApi/statements/dataBuilders/questions/informationContent.ts","core/xApi/statements/dataBuilders/course.ts","core/xApi/statements/factory.ts","core/xApi/errors/errorHandler.ts","core/xApi/events/EventHandler.ts","core/xApi/statements/storage.ts","core/xApi/statements/sender.ts","core/xApi/events/LrsEventHandler.ts","core/xApi/events/NpsEventHandler.ts","core/xApi/index.ts"],"names":["timeToISODuration","timeInMilliseconds","hours","roundUp","minutes","seconds","value","parseInt","sectionActivity","section","TinCan","Activity","id","getSectionAbsoluteUrl","definition","ActivityDefinition","type","activityTypes","objective","name","title","result","score","omitScore","response","duration","Result","Score","scaled","courseId","sessionId","course","actor","lrs","nps","this","attemptId","settings","defaultLrsUrl","initializeInstance","getLrsRecordStore","defaultNpsUrl","getNpsRecordStore","instance","recordStore","courseName","addRecordStore","getActor","activity","getCurrentUrl","context","getDefaultContext","endpoint","uri","isDefaultLrs","LRS","version","username","credentials","password","allowFail","email","account","Agent","mbox","extendContext","Context","contextActivities","ContextActivities","extensions","extensionKeys","registration","selectedLrs","defaultLrsName","sectionProgressed","xapiStatus","verb","isInProgress","verbs","progressed","mastered","object","question","answers","filter","e","indexOf","map","join","separators","comma","correctResponsesPattern","questionTypes","correctAnswerId","isCorrect","interactionType","interactionTypes","choice","extraActivityDefinition","choices","option","description","image","text","questionContent","sourceResponse","answerGroups","data","responseData","reduce","acc","getResponse","Object","keys","key","dot","answerGroup","answer","content","fillIn","answeredText","other","getOptions","array","index","toString","sources","targets","userResponse","find","i","shownSelectedValue","matching","source","target","answerTexts","dropspots","x","y","dropSpot","userAnswer","answerItem","items","length","answerDropSpot","imageUrl","background","spots","spot","coords","questionAnswered","buildStatementData","multipleChoice","fillInTheBlanks","openQuestion","statement","rankingText","textMatching","scenario","dragAndDrop","hotspot","Error","getBuilder","rawData","tinCan","parent","surveyMode","hasOwnProperty","isSurvey","questionType","defaultContext","assign","activityDefinition","interaction","answered","getQuestionAbsoluteUrl","questionExperienced","experienced","verbsObject","ProgressStatus","PASSED","passed","FAILED","failed","IN_PROGRESS","questionProgressed","questionData","INFORMATION_CONTENT","courseStarted","started","courseProgressed","timeSpent","overallCourseProgressed","statementsData","isSubmitOnce","flat","questionsStatementsData","sectionsStatementsData","courseStatementData","questionsStatementData","sectionsData","sectionStatementsData","courseData","courseEvaluated","evaluated","informationContentExperienced","listStatement","forEach","builder","statements","Statement","console","error","errorToString","code","mesg","EventHandler","sendStatement","shouldHandlerErrors","handlers","factoryMethod","arg","a","async","handle","args","statementFactory","errorHandler","BaseEventHandler","push","lastRequestSuccess","promises","statementsToSend","getAllowedStatements","storage","sendStorageStatements","Promise","all","doSend","sendStatements","bind","allowedVerbs","display","shift","statementsPromises","chunk","statementChunk","send","resolve","reject","failedResult","err","eventEmitter","emit","events","APP_ONLINE","catch","setTimeout","APP_OFFLINE_OR_SERVER_ERROR","RETRY_DELAY_MILLISECONDS","LrsEventHandler","statementSender","sendLrsStatements","isScoringOfContentPagesAllowed","event","COURSE_SUBMIT","createHandler","COURSE_STARTED","QUESTION_ANSWERED","INFORMATION_CONTENT_EXPERIENCED","NpsEventHandler","sendNpsStatement","COURSE_EVALUATED","XApi","lrsEventHandler","npsEventHandler","initializeLrs","xApi","unsubscribeLrs","on","initializeNps","unsubscribeNps","errorToConsole","off","initialize"],"mappings":"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","file":"static/js/0.1db78e0f.chunk.js","sourcesContent":["export const timeToISODuration = (timeInMilliseconds: number) => {\n  timeInMilliseconds /= 1000;\n\n  const hours = roundUp(timeInMilliseconds / 3600);\n  timeInMilliseconds -= hours * 3600;\n\n  const minutes = roundUp(timeInMilliseconds / 60);\n  timeInMilliseconds -= minutes * 60;\n\n  const seconds = roundUp(timeInMilliseconds);\n  return `PT${hours}H${minutes}M${seconds}S`;\n};\n\nconst roundUp = (value: number) => {\n  return parseInt(value as any, 10);\n};\n","import { getCurrentUrl } from 'utils/window';\nimport TinCan from '@easygenerator/tincanjs/build/tincan';\nimport { getSectionAbsoluteUrl } from 'utils/navigation';\nimport { activityTypes } from '../constants';\nimport { timeToISODuration } from './utils/dateTimeConverter';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const courseActivity = (courseName: any) =>\n  new TinCan.Activity({\n    id: getCurrentUrl(),\n    definition: new TinCan.ActivityDefinition({\n      type: activityTypes.course,\n      name: {\n        'en-US': courseName\n      }\n    })\n  });\n\nexport const sectionActivity = (section: any) =>\n  new TinCan.Activity({\n    id: getSectionAbsoluteUrl(section.id),\n    definition: new TinCan.ActivityDefinition({\n      type: activityTypes.objective,\n      name: {\n        'en-US': section.title\n      }\n    })\n  });\n\nexport const result = ({\n  score,\n  omitScore = false,\n  response,\n  duration\n}: {\n  score: number;\n  omitScore?: boolean;\n  response?: any;\n  duration?: number;\n}) =>\n  new TinCan.Result({\n    ...(!omitScore && {\n      score: new TinCan.Score({\n        scaled: score / 100\n      })\n    }),\n    ...(response && { response }),\n    ...(duration && { duration: timeToISODuration(duration) })\n  });\n","import TinCan from '@easygenerator/tincanjs/build/tincan';\nimport { defaultLrsName, extensionKeys } from './constants';\nimport { courseActivity } from './statements/xapiEntityFactory';\n\nclass TinCanWrapper {\n  courseId: any;\n  sessionId: any;\n  course: any;\n  actor: any;\n  lrs: any;\n  nps: any;\n\n  initialize({ course, actor }: any) {\n    this.courseId = course.id;\n    this.sessionId = course.attemptId;\n    this.course = course;\n    this.actor = actor;\n    // TinCan.enableDebug();\n  }\n\n  initializeLrs(settings: any, defaultLrsUrl: any) {\n    this.lrs = new TinCan();\n    this.initializeInstance(this.lrs, this.getLrsRecordStore(settings, defaultLrsUrl));\n  }\n\n  initializeNps(defaultNpsUrl: any) {\n    this.nps = new TinCan();\n    this.initializeInstance(this.nps, this.getNpsRecordStore(defaultNpsUrl));\n  }\n\n  initializeInstance(instance: any, recordStore: any) {\n    instance.addRecordStore(recordStore);\n    instance.actor = this.getActor(this.actor);\n    instance.activity = courseActivity(this.course.title);\n    instance.context = this.getDefaultContext();\n  }\n\n  getLrsRecordStore(settings: any, defaultLrsUrl: any) {\n    let { uri: endpoint } = settings.lrs;\n    if (this.isDefaultLrs(settings)) {\n      endpoint = `${defaultLrsUrl}/xApi`;\n    }\n    return new TinCan.LRS({\n      endpoint,\n      version: settings.version,\n      username: settings.lrs.credentials.username,\n      password: settings.lrs.credentials.password,\n      allowFail: false\n    });\n  }\n\n  getNpsRecordStore(defaultNpsUrl: any) {\n    return new TinCan.LRS({\n      endpoint: `${defaultNpsUrl}/xApi`,\n      username: '',\n      password: '',\n      allowFail: false\n    });\n  }\n\n  getActor({ username, email, account }: any) {\n    if (account) {\n      return new TinCan.Agent({\n        name: username || account.name,\n        account\n      });\n    }\n    return new TinCan.Agent({\n      name: username,\n      mbox: `mailto:${email}`\n    });\n  }\n\n  getDefaultContext() {\n    return this.extendContext(\n      new TinCan.Context({\n        contextActivities: new TinCan.ContextActivities({})\n      })\n    );\n  }\n\n  extendContext(context: any) {\n    context.extensions = context.extensions || {};\n    context.extensions[extensionKeys.courseId] = this.courseId;\n    context.registration = this.sessionId;\n    return context;\n  }\n\n  isDefaultLrs(settings: any) {\n    return settings.selectedLrs === defaultLrsName;\n  }\n}\n\nexport default new TinCanWrapper();\n","import { verbs } from '../../constants';\nimport { result, sectionActivity } from '../xapiEntityFactory';\nimport { isInProgress } from 'utils/comparison';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const sectionProgressed = ({\n  section,\n  xapiStatus\n}: {\n  section: any;\n  xapiStatus: number;\n}) => ({\n  verb: isInProgress(xapiStatus) ? verbs.progressed : verbs.mastered,\n  object: sectionActivity(section),\n  result: result({ score: section.score })\n});\n","import * as questionTypes from 'constants/questionTypes';\nimport { interactionTypes, separators } from '../../../constants';\n\nexport default (question: any) => {\n  const response = question.answers\n    .filter((e: any) => question.response.indexOf(e.id) >= 0)\n    .map((e: any) => e.id)\n    .join(separators.comma);\n  const correctResponsesPattern =\n    question.type === questionTypes.SINGLE_CHOICE_IMAGE\n      ? question.correctAnswerId\n      : question.answers\n          .filter((e: any) => e.isCorrect)\n          .map((e: any) => e.id)\n          .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.choice,\n    extraActivityDefinition: {\n      choices: question.answers.map((option: any) => ({\n        id: option.id,\n        description: {\n          'en-US': question.type === questionTypes.SINGLE_CHOICE_IMAGE ? option.image : option.text\n        }\n      }))\n    }\n  };\n};\n","import { interactionTypes, separators, extensionKeys } from '../../../constants';\n\nconst getResponse = (answerGroups: any[]) =>\n  answerGroups.reduce((acc, { id }: any) => ({ [id]: '', ...acc }), {});\n\nexport default (question: any, questionContent: any) => {\n  const { response: sourceResponse, answerGroups } = question;\n  const { data: responseData = getResponse(answerGroups) } = sourceResponse;\n  const response = Object.keys(responseData)\n    .map(key => `${responseData[key]}${separators.dot}${key}`)\n    .join(separators.comma);\n\n  const correctResponsesPattern = answerGroups\n    .map((answerGroup: any) => {\n      const correctAnswers = answerGroup.answers.filter((e: any) => e.isCorrect);\n      return correctAnswers\n        .map((answer: any) => `${answer.text}${separators.dot}${answerGroup.id}`)\n        .join(separators.comma);\n    })\n    .join(separators.comma);\n\n  const [content = { value: '' }] = questionContent;\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.fillIn,\n    extensions: {\n      [extensionKeys.content]: content.value\n    }\n  };\n};\n","import { interactionTypes } from '../../../constants';\n\nexport default (question: any) => ({\n  response: question.response.answeredText,\n  omitScore: true,\n  interactionType: interactionTypes.other\n});\n","import { interactionTypes, separators } from '../../../constants';\n\nexport default (question: any) => {\n  const response = question.response\n    .map((e: any) => `${e.id}${separators.dot}${e.isCorrect}`)\n    .join(separators.comma);\n  const correctResponsesPattern = question.answers\n    .map((e: any) => `${e.id}${separators.dot}${e.isCorrect}`)\n    .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.choice,\n    extraActivityDefinition: {\n      choices: question.answers.map((option: any) => ({\n        id: option.id,\n        description: {\n          'en-US': option.text\n        }\n      }))\n    }\n  };\n};\n","import { interactionTypes, separators } from '../../../constants';\n\nexport default (question: any) => {\n  const response = question.response.map((e: any) => e.text).join(separators.comma);\n  const correctResponsesPattern = question.answers.map((e: any) => e.text).join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.choice,\n    extraActivityDefinition: {\n      choices: question.answers.map((option: any) => ({\n        id: option.text,\n        description: {\n          'en-US': option.text\n        }\n      }))\n    }\n  };\n};\n","import { interactionTypes, separators } from '../../../constants';\n\nexport default (question: any) => {\n  const getOptions = (array: any) =>\n    array.map((e: any, index: any) => ({\n      id: index.toString(),\n      description: {\n        'en-US': e\n      }\n    }));\n\n  const sources = question.answers.map((e: any) => e.key);\n  const targets = question.answers\n    .map((e: any) => e.value)\n    .filter((e: any, index: any, array: any) => array.indexOf(e) === index);\n\n  const correctResponsesPattern = question.answers\n    .map((e: any) => `${sources.indexOf(e.key)}${separators.dot}${targets.indexOf(e.value)}`)\n    .join(separators.comma);\n\n  const response = sources\n    .map((e: any, index: any) => {\n      const userResponse = question.response.find((i: any) => i.key === e);\n      let answer = '';\n      if (userResponse && userResponse.shownSelectedValue) {\n        answer = targets.indexOf(userResponse.shownSelectedValue);\n      }\n      return `${index}${separators.dot}${answer}`;\n    })\n    .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.matching,\n    extraActivityDefinition: {\n      source: getOptions(sources),\n      target: getOptions(targets)\n    }\n  };\n};\n","import { interactionTypes } from '../../../constants';\n\nexport default () => ({\n  interactionType: interactionTypes.other\n});\n","import { interactionTypes, separators, extensionKeys } from '../../../constants';\n\nconst NOT_ANSWERED_PATTERN = '(-1,-1)';\n\nexport default (question: any) => {\n  const answerTexts = question.dropspots.map((e: any) => e.text).join(separators.comma);\n  const correctResponsesPattern = question.dropspots\n    .map((e: any) => `(${e.x},${e.y})`)\n    .join(separators.comma);\n  const response = question.dropspots\n    .map((dropSpot: any) => {\n      const userAnswer = question.response.find((answer: any) => answer.id === dropSpot.id);\n      if (!userAnswer) {\n        return NOT_ANSWERED_PATTERN;\n      }\n\n      const answerItem = userAnswer.items.length && userAnswer.items[0];\n      if (!answerItem) {\n        return NOT_ANSWERED_PATTERN;\n      }\n\n      const answerDropSpot = question.dropspots.find((e: any) => e.id === answerItem.id);\n      return `(${answerDropSpot.x},${answerDropSpot.y})`;\n    })\n    .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.other,\n    extensions: {\n      [extensionKeys.imageUrl]: question.background,\n      [extensionKeys.answerTexts]: answerTexts\n    }\n  };\n};\n","import { interactionTypes, separators, extensionKeys } from '../../../constants';\n\nexport default (question: any) => {\n  const response = question.response.map((e: any) => `(${e.x},${e.y})`).join(separators.comma);\n  const correctResponsesPattern = question.spots\n    .map((spot: any) => spot.map((coords: any) => `(${coords.x},${coords.y})`).join(separators.dot))\n    .join(separators.comma);\n\n  return {\n    response,\n    correctResponsesPattern,\n    interactionType: interactionTypes.other,\n    extensions: {\n      [extensionKeys.imageUrl]: question.background\n    }\n  };\n};\n","import { getQuestionAbsoluteUrl } from 'utils/navigation';\nimport * as questionTypes from 'constants/questionTypes';\nimport TinCan from '@easygenerator/tincanjs/build/tincan';\nimport { activityTypes, verbs, extensionKeys } from '../../../constants';\nimport { sectionActivity, result } from '../../xapiEntityFactory';\nimport tinCan from '../../../tinCan';\n\nimport multipleChoice from './multipleChoice';\nimport fillInTheBlanks from './fillInTheBlanks';\nimport openQuestion from './openQuestion';\nimport statement from './statement';\nimport rankingText from './rankingText';\nimport textMatching from './textMatching';\nimport scenario from './scenario';\nimport dragAndDrop from './dragAndDrop';\nimport hotspot from './hotspot';\n\nexport const questionAnswered = ([question, section, questionContent]: any) =>\n  buildStatementData(question, section, getBuilder(question)(question, questionContent));\n\nfunction getBuilder(question: any) {\n  switch (question.type) {\n    case questionTypes.SINGLE_CHOICE:\n    case questionTypes.MULTIPLE_CHOICE:\n    case questionTypes.SINGLE_CHOICE_IMAGE:\n      return multipleChoice;\n    case questionTypes.FILL_IN_THE_BLANK:\n      return fillInTheBlanks;\n    case questionTypes.OPEN_QUESTION:\n      return openQuestion;\n    case questionTypes.STATEMENT_CHOICE:\n      return statement;\n    case questionTypes.RANKING_TEXT:\n      return rankingText;\n    case questionTypes.TEXT_MATCHING:\n      return textMatching;\n    case questionTypes.SCENARIO:\n      return scenario;\n    case questionTypes.DRAG_AND_DROP_TEXT:\n      return dragAndDrop;\n    case questionTypes.HOTSPOT:\n      return hotspot;\n    default:\n      throw new Error(`Question type ${question.type} is not supported`);\n  }\n}\n\nexport function buildStatementData(question: any, section: any, rawData: any) {\n  const {\n    response,\n    correctResponsesPattern,\n    interactionType,\n    extraActivityDefinition,\n    omitScore,\n    extensions,\n    verb\n  } = rawData;\n  const context = defaultContext(question, section);\n  context.extensions = Object.assign(context.extensions, extensions);\n\n  let activityDefinition = {\n    name: {\n      'en-US': question.title\n    },\n    type: activityTypes.interaction,\n    interactionType,\n    ...(correctResponsesPattern && {\n      correctResponsesPattern: question.isSurvey ? [] : [correctResponsesPattern]\n    })\n  };\n  activityDefinition = Object.assign(activityDefinition, extraActivityDefinition);\n\n  return {\n    context,\n    verb: verb || verbs.answered,\n    object: new TinCan.Activity({\n      id: getQuestionAbsoluteUrl(section.id, question.id),\n      definition: new TinCan.ActivityDefinition(activityDefinition)\n    }),\n    result: result({ score: question.score, omitScore, response })\n  };\n}\n\nfunction defaultContext(question: any, section: any) {\n  return tinCan.extendContext(\n    new TinCan.Context({\n      contextActivities: new TinCan.ContextActivities({\n        parent: [sectionActivity(section)]\n      }),\n      extensions: {\n        [extensionKeys.surveyMode]: question.hasOwnProperty('isSurvey') && question.isSurvey,\n        [extensionKeys.questionType]: question.type\n      }\n    })\n  );\n}\n","import { buildStatementData } from '.';\nimport { verbs, interactionTypes } from '../../../constants';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const questionExperienced = ([question, section]: any) =>\n  buildStatementData(question, section, {\n    interactionType: interactionTypes.other,\n    verb: verbs.experienced\n  });\n","import { verbs } from '../../constants';\nimport { result } from '../xapiEntityFactory';\nimport { ProgressStatus } from 'constants/progressStatus';\nimport { INFORMATION_CONTENT } from 'constants/questionTypes';\nimport { sectionProgressed } from './section';\nimport { questionAnswered } from './questions';\nimport { questionExperienced } from './questions/informationContent';\n\nconst verbsObject: Record<ProgressStatus, object> = {\n  [ProgressStatus.PASSED]: verbs.passed,\n  [ProgressStatus.FAILED]: verbs.failed,\n  [ProgressStatus.IN_PROGRESS]: verbs.progressed\n};\n\nconst questionProgressed = (questionData: any) => {\n  const [question] = questionData;\n  const handler = question.type === INFORMATION_CONTENT ? questionExperienced : questionAnswered;\n  return handler(questionData);\n};\n\nexport const courseStarted = () => ({\n  verb: verbs.started\n});\n\nexport const courseProgressed = ({\n  course,\n  timeSpent,\n  xapiStatus\n}: {\n  course: any;\n  timeSpent: number;\n  xapiStatus: number;\n}) => ({\n  verb: verbsObject[xapiStatus as ProgressStatus],\n  result: result({ score: course.score, duration: timeSpent })\n});\n\nexport const overallCourseProgressed = ({\n  statementsData,\n  isSubmitOnce = false\n}: {\n  statementsData: any[];\n  isSubmitOnce: boolean;\n}) => {\n  if (!isSubmitOnce) {\n    const statements = statementsData.map(({ section, questionData, course }: any) => {\n      return [\n        section ? sectionProgressed(section) : [],\n        questionData ? questionProgressed(questionData) : [],\n        courseProgressed(course)\n      ];\n    });\n\n    return statements.flat(2);\n  }\n\n  const [questionsStatementsData, sectionsStatementsData, courseStatementData] = statementsData;\n\n  const questionData = questionsStatementsData.map((questionsStatementData: any) => {\n    return questionProgressed(questionsStatementData);\n  });\n\n  const sectionsData = sectionsStatementsData.map((sectionStatementsData: any) => {\n    return sectionProgressed(sectionStatementsData);\n  });\n\n  const courseData = courseProgressed(courseStatementData);\n\n  return [...questionData, ...sectionsData, courseData];\n};\n\nexport const courseStopped = () => ({\n  verb: verbs.stopped\n});\n\nexport const courseEvaluated = ({ score, response }: any) => ({\n  verb: verbs.evaluated,\n  result: result({ score, response })\n});\n","import TinCan from '@easygenerator/tincanjs/build/tincan';\nimport { courseStarted, courseEvaluated, overallCourseProgressed } from './dataBuilders/course';\nimport { questionAnswered } from './dataBuilders/questions';\nimport { questionExperienced } from './dataBuilders/questions/informationContent';\n\nexport interface StatementNames {\n  courseStarted: any;\n  overallCourseProgressed: any;\n  courseEvaluated: any;\n  questionAnswered: any;\n  informationContentExperienced: any;\n};\n\ntype Statement = {\n  name: keyof StatementNames,\n  instance: any;\n}\n\nclass StatementFactory implements StatementNames {\n  courseStarted: any;\n  overallCourseProgressed: any;\n  courseEvaluated: any;\n  questionAnswered: any;\n  informationContentExperienced: any;\n  listStatement: Array<Statement>;\n\n  constructor() {\n    this.listStatement = [\n      { name: 'courseStarted', instance: courseStarted },\n      { name: 'overallCourseProgressed', instance: overallCourseProgressed },\n      { name: 'courseEvaluated', instance: courseEvaluated },\n      { name: 'questionAnswered', instance: questionAnswered },\n      { name: 'informationContentExperienced', instance: questionExperienced }\n    ];\n\n    this.listStatement.forEach((builder: Statement) => {\n      this[builder.name] = (...args: any) => {\n        const statements = [builder.instance(...args)].flat();\n        return statements.map((statement) => new TinCan.Statement(statement));\n      }\n    });\n  }\n}\n\nexport default new StatementFactory();\n","export default (e: any) => {\n  console.error(`xApi error: [ ${errorToString(e)} ]`);\n  // TODO: add error handling logic\n};\n\nexport function errorToConsole(e: any) {\n  console.error(`xApi error: [ ${errorToString(e)} ]`);\n}\n\nfunction errorToString(e: any) {\n  if (!e) return 'undefined error';\n  // tinCan error\n  if (e.code && e.mesg) {\n    return `code: ${e.code}, message: ${e.mesg}`;\n  }\n\n  return e.toString();\n}\n","import BaseEventHandler from 'core/events/eventHandler';\nimport statementFactory, { StatementNames } from '../statements/factory';\nimport errorHandler from '../errors/errorHandler';\n\nexport default class EventHandler extends BaseEventHandler {\n  handlers: any[];\n  sendStatement: any;\n  shouldHandlerErrors: any;\n\n  constructor({ sendStatement, shouldHandlerErrors }: any) {\n    super();\n    this.handlers = [];\n    this.sendStatement = sendStatement;\n    this.shouldHandlerErrors = shouldHandlerErrors;\n  }\n\n  createHandler(factoryMethod: any) {\n    return async (arg: any) => {\n      await this.handle(factoryMethod, arg);\n    };\n  }\n\n  async handle(factoryMethod: keyof StatementNames, args: any) {\n    try {\n      const statement = statementFactory[factoryMethod](args);\n      await this.sendStatement(statement);\n    } catch (e) {\n      if (this.shouldHandlerErrors) {\n        errorHandler(e);\n      } else {\n        throw e;\n      }\n    }\n  }\n}\n","class Storage {\n  statements: any[];\n\n  constructor() {\n    this.statements = [];\n  }\n\n  push(statements: any) {\n    this.statements.push(...[statements].flat());\n  }\n\n  shift() {\n    const value = this.statements;\n    this.statements = [];\n    return value;\n  }\n}\n\nexport default new Storage();\n","import eventEmitter, { events } from 'core/events/eventEmitter';\nimport { RETRY_DELAY_MILLISECONDS } from 'core/http/requester';\nimport chunk from 'lodash.chunk';\nimport tinCan from '../tinCan';\nimport storage from './storage';\n\nconst REQUEST_PAYLOAD_CHUNK_SIZE = 10;\nlet lastRequestSuccess = true;\nclass StatementSender {\n  settings: any;\n\n  promises: any;\n\n  initialize(settings: any) {\n    this.settings = settings;\n    this.promises = [];\n  }\n\n  sendLrsStatements(statements: any[]) {\n    let statementsToSend = statements;\n    if (!tinCan.isDefaultLrs(this.settings)) {\n      statementsToSend = this.getAllowedStatements(statements);\n\n      if (!statementsToSend.length) {\n        return null;\n      }\n    }\n\n    storage.push(statementsToSend);\n    this.sendStorageStatements();\n\n    return Promise.all(this.promises);\n  }\n\n  sendNpsStatement(statement: any) {\n    this.doSend(tinCan.nps.sendStatements.bind(tinCan.nps), statement);\n  }\n\n  getAllowedStatements(statements: any[]) {\n    return statements.filter(\n      (statement: any) => this.settings.allowedVerbs.indexOf(statement.verb.display['en-US']) >= 0\n    );\n  }\n\n  sendStorageStatements() {\n    const statements = storage.shift();\n\n    if (statements.length !== 0) {\n      const chunks = chunk(statements, REQUEST_PAYLOAD_CHUNK_SIZE);\n      const statementsPromises = chunks.map(statementChunk =>\n        this.doSend(tinCan.lrs.sendStatements.bind(tinCan.lrs), statementChunk)\n      );\n      this.promises.push(statementsPromises);\n    }\n  }\n\n  doSend(send: any, data: any) {\n    return new Promise((resolve, reject) => {\n      send(data, (result: any) => {\n        if (result) {\n          const failedResult = result.find((e: any) => e.err !== null);\n          if (failedResult) {\n            reject(failedResult.err);\n          } else {\n            !lastRequestSuccess && eventEmitter.emit(events.APP_ONLINE);\n            lastRequestSuccess = true;\n            resolve();\n          }\n        }\n      });\n    }).catch(() => {\n      setTimeout(() => {\n        lastRequestSuccess && eventEmitter.emit(events.APP_OFFLINE_OR_SERVER_ERROR);\n        lastRequestSuccess = false;\n        this.doSend(send, data);\n      }, RETRY_DELAY_MILLISECONDS);\n    });\n  }\n}\n\nexport default new StatementSender();\n","import { events } from 'core/events/eventEmitter';\nimport EventHandler from './EventHandler';\nimport statementSender from '../statements/sender';\n\nexport default class LrsEventHandler extends EventHandler {\n  constructor() {\n    super({\n      sendStatement: statementSender.sendLrsStatements.bind(statementSender),\n      shouldHandlerErrors: true\n    });\n  }\n\n  initialize({ isScoringOfContentPagesAllowed }: any) {\n    this.handlers = [\n      { event: events.COURSE_SUBMIT, instance: this.createHandler('overallCourseProgressed') },\n      { event: events.COURSE_STARTED, instance: this.createHandler('courseStarted') },\n      { event: events.QUESTION_ANSWERED, instance: this.createHandler('overallCourseProgressed') }\n    ];\n\n    if (isScoringOfContentPagesAllowed) {\n      this.handlers.push({\n        event: events.INFORMATION_CONTENT_EXPERIENCED,\n        instance: this.createHandler('overallCourseProgressed')\n      });\n    }\n  }\n}\n","import { events } from 'core/events/eventEmitter';\nimport EventHandler from './EventHandler';\nimport statementSender from '../statements/sender';\nexport default class NpsEventHandler extends EventHandler {\n  constructor() {\n    super({ sendStatement: statementSender.sendNpsStatement.bind(statementSender) });\n  }\n\n  initialize() {\n    this.handlers = [\n      {\n        event: events.COURSE_EVALUATED,\n        instance: this.createHandler('courseEvaluated')\n      }\n    ];\n  }\n}\n","import tinCan from './tinCan';\nimport LrsEventHandler from './events/LrsEventHandler';\nimport NpsEventHandler from './events/NpsEventHandler';\nimport statementSender from './statements/sender';\nimport errorHandler, { errorToConsole } from './errors/errorHandler';\n\nclass XApi {\n  lrsEventHandler: any;\n  npsEventHandler: any;\n  settings: any;\n  defaultLrsUrl: any;\n  defaultNpsUrl: any;\n\n  constructor() {\n    this.lrsEventHandler = new LrsEventHandler();\n    this.npsEventHandler = new NpsEventHandler();\n  }\n\n  subscribeLrs() {\n    try {\n      tinCan.initializeLrs(this.settings.xApi, this.defaultLrsUrl);\n    } catch (e) {\n      this.unsubscribeLrs();\n      errorHandler(e);\n    }\n    this.lrsEventHandler.on();\n  }\n\n  subscribeNps() {\n    try {\n      tinCan.initializeNps(this.defaultNpsUrl);\n    } catch (e) {\n      this.unsubscribeNps();\n      errorToConsole(e);\n    }\n    this.npsEventHandler.on();\n  }\n\n  unsubscribeLrs() {\n    this.lrsEventHandler.off();\n  }\n\n  unsubscribeNps() {\n    this.npsEventHandler.off();\n  }\n\n  unsubscribeAll() {\n    this.unsubscribeLrs();\n    this.unsubscribeNps();\n  }\n\n  initialize({ settings, defaultLrsUrl, defaultNpsUrl, course, actor }: any) {\n    this.settings = settings;\n    this.defaultLrsUrl = defaultLrsUrl;\n    this.defaultNpsUrl = defaultNpsUrl;\n    this.lrsEventHandler.initialize(settings);\n    this.npsEventHandler.initialize();\n    tinCan.initialize({ course, actor });\n    statementSender.initialize(settings.xApi);\n  }\n}\n\nexport default new XApi();\n"],"sourceRoot":""}