{"version":3,"sources":["core/scorm/lms.ts","core/scorm/lms2004.ts","core/scorm/eventHandler.ts","core/scorm/index.ts"],"names":["self","initialized","apiWrapper","_NoError","code","string","diagnostic","_GeneralException","apiHandle","doLMSInitialize","doLMSFinish","result","api","getAPIHandle","handleError","LMSFinish","toString","err","ErrorHandler","doLMSGetValue","name","LMSGetValue","error","doLMSSetValue","value","LMSSetValue","doLMSCommit","LMSCommit","LMSInitialize","LMSGetLastError","LMSGetErrorString","LMSGetDiagnostic","theAPI","findAPI","window","opener","getAPI","win","findAPITries","API","parent","getApiWrapper","startTime","errorHandlers","console","log","bind","lmsReporting","initialize","status","Date","addEventListener","endSession","showWarningMessage","progressProvider","getProgress","progress","JSON","parse","decodeJson","e","saveProgress","progressResult","stringify","statusResult","removeProgress","userInfoProvider","getUsername","getAccountId","getAccountHomePage","location","origin","protocol","host","courseFinished","course","isPassed","updateScore","score","courseFinalized","removeEventListener","isCourseFinished","addErrorHandler","handler","push","msg","index","length","duration","getTime","replace","event","preventDefault","returnValue","output","doInitialize","Terminate","message","doGetValue","doSetValue","Commit","Initialize","GetValue","SetValue","GetLastError","GetErrorString","GetDiagnostic","API_1484_11","str","milliseconds","Math","round","seconds","floor","minutes","hours","millisecondsStr","convertTimeSpanToLmsTimeString","is2004","this","lms2004","lms","eventEmitter","on","events","COURSE_FINISHED","COURSE_FINALIZED","off","Scorm","eventHandler"],"mappings":"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","file":"static/js/11.73d421a3.chunk.js","sourcesContent":["/* eslint-disable */\nimport { isPassed } from 'utils/comparison';\nimport { decodeJson } from 'utils/string';\nconst self: { [key: string]: any } = {\n  initialized: false,\n  apiWrapper: getApiWrapper(),\n  startTime: null\n};\n\nconst CMI_SUSPEND_DATA = 'cmi.suspend_data';\nconst CMI_CORE_EXIT = 'cmi.core.exit';\nconst CMI_CORE_LESSON_STATUS = 'cmi.core.lesson_status';\n\nconst errorHandlers: any = [console.log.bind(console)]; // Array which contains all error handlers (use addErrorHandler method to add new handlers)\n\nconst lmsReporting: { [key: string]: any } = {\n  initialize() {\n    self.initialized = self.apiWrapper.doLMSInitialize() === 'true';\n    setLessonStatus('incomplete');\n    if (self.initialized) {\n      self.startTime = new Date();\n      if (window.addEventListener) {\n        window.addEventListener('unload', endSession);\n        window.addEventListener('beforeunload', showWarningMessage);\n      }\n    }\n  },\n\n  progressProvider: {\n    getProgress,\n    saveProgress,\n    removeProgress\n  },\n\n  userInfoProvider: {\n    getUsername() {\n      return self.apiWrapper.doLMSGetValue('cmi.core.student_name');\n    },\n    getAccountId() {\n      return self.apiWrapper.doLMSGetValue('cmi.core.student_id');\n    },\n    getAccountHomePage() {\n      return window.location.origin || `${window.location.protocol}//${window.location.host}`;\n    }\n  },\n\n  courseFinished: sendCourseResults,\n  courseFinalized: finalizeCourseSession,\n\n  addErrorHandler\n};\n\nexport default lmsReporting;\n\nfunction addErrorHandler(handler: any) {\n  errorHandlers.push(handler);\n}\n\nfunction handleError(msg: any) {\n  for (var index = 0; index < errorHandlers.length; index++) {\n    errorHandlers[index](msg);\n  }\n}\n\nfunction endSession() {\n  const endTime = new Date();\n  const duration = endTime.getTime() - self.startTime.getTime();\n  self.apiWrapper.doLMSSetValue('cmi.core.session_time', convertTimeSpanToLmsTimeString(duration));\n  self.apiWrapper.doLMSCommit();\n\n  self.apiWrapper.doLMSFinish();\n}\n\nfunction showWarningMessage(event: any) {\n  event.preventDefault();\n  event.returnValue = '';\n  return '';\n}\n\nfunction convertTimeSpanToLmsTimeString(milliseconds: any) {\n  return new Date(0, 0, 0, 0, 0, 0, milliseconds)\n    .toString()\n    .replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '$1');\n}\n\nfunction getProgress() {\n  let progress: any = {};\n  try {\n    progress = JSON.parse(decodeJson(self.apiWrapper.doLMSGetValue(CMI_SUSPEND_DATA)));\n  } catch (e) {\n    handleError('Unable to restore progress');\n  }\n  return progress;\n}\n\nfunction saveProgress(progress: any) {\n  const progressResult =\n    self.apiWrapper.doLMSSetValue(CMI_SUSPEND_DATA, JSON.stringify(progress)) === 'true';\n  const statusResult =\n    self.apiWrapper.doLMSSetValue(CMI_CORE_LESSON_STATUS, 'incomplete') === 'true';\n  const result = progressResult && statusResult;\n  if (result) {\n    self.apiWrapper.doLMSSetValue(CMI_CORE_EXIT, 'suspend');\n    self.apiWrapper.doLMSCommit();\n  }\n  return result;\n}\n\nfunction removeProgress() {\n  self.apiWrapper.doLMSSetValue(CMI_CORE_LESSON_STATUS, 'passed');\n  const result = self.apiWrapper.doLMSSetValue(CMI_SUSPEND_DATA, '') === 'true';\n  if (result) {\n    self.apiWrapper.doLMSSetValue(CMI_CORE_EXIT, '');\n    self.apiWrapper.doLMSCommit();\n  }\n\n  return result;\n}\n\nfunction updateScore(score: any) {\n  self.apiWrapper.doLMSSetValue('cmi.core.score.min', '0');\n  self.apiWrapper.doLMSSetValue('cmi.core.score.max', '100');\n  self.apiWrapper.doLMSSetValue('cmi.core.score.raw', score);\n}\n\nfunction sendCourseResults(course: any) {\n  self.apiWrapper.doLMSSetValue(\n    CMI_CORE_LESSON_STATUS,\n    isPassed(course.status) ? 'passed' : 'failed'\n  );\n  updateScore(course.score);\n  self.apiWrapper.doLMSCommit();\n}\n\nfunction finalizeCourseSession(course: any) {\n  if (window.removeEventListener) {\n    window.removeEventListener('unload', endSession);\n    window.removeEventListener('beforeunload', showWarningMessage);\n  }\n  if (!course.isCourseFinished) {\n    updateScore(course.score);\n  }\n  endSession();\n}\n\nfunction setLessonStatus(status: any) {\n  self.apiWrapper.doLMSSetValue(CMI_CORE_LESSON_STATUS, status);\n}\n\nfunction getApiWrapper() {\n  // Define exception/error codes\n  const _NoError = { code: '0', string: 'No Error', diagnostic: 'No Error' };\n  const _GeneralException = {\n    code: '101',\n    string: 'General Exception',\n    diagnostic: 'General Exception'\n  };\n\n  let initialized = false;\n\n  // local variable definitions\n  let apiHandle: any = null;\n\n  return {\n    doLMSInitialize,\n    doLMSFinish,\n    doLMSGetValue,\n    doLMSSetValue,\n    doLMSCommit\n  };\n\n  /*******************************************************************************\n   **\n   ** Function: doLMSInitialize()\n   ** Inputs:  None\n   ** Return:  true if the initialization was successful, or\n   **          false if the initialization failed.\n   **\n   ** Description:\n   ** Initialize communication with LMS by calling the LMSInitialize\n   ** function which will be implemented by the LMS.\n   **\n   *******************************************************************************/\n  function doLMSInitialize() {\n    if (initialized) {\n      return 'true';\n    }\n\n    const api = getAPIHandle();\n    if (api == null) {\n      handleError(\n        \"Unable to locate the LMS's API Implementation.\\nLMSInitialize was not successful.\"\n      );\n      return 'false';\n    }\n\n    const result = api.LMSInitialize('');\n    if (result.toString() !== 'true') {\n      const err = ErrorHandler();\n      handleError(`LMSInitialize failed with error code: ${err.code}`);\n    } else {\n      initialized = true;\n    }\n\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doLMSFinish()\n   ** Inputs:  None\n   ** Return:  true if successful\n   **          false if failed.\n   **\n   ** Description:\n   ** Close communication with LMS by calling the LMSFinish\n   ** function which will be implemented by the LMS\n   **\n   *******************************************************************************/\n  function doLMSFinish() {\n    if (!initialized) {\n      return 'true';\n    }\n    let result: any;\n\n    const api = getAPIHandle();\n    if (api == null) {\n      handleError(\"Unable to locate the LMS's API Implementation.\\nLMSFinish was not successful.\");\n      return 'false';\n    } else {\n      // call the LMSFinish function that should be implemented by the API\n      result = api.LMSFinish('');\n      if (result.toString() !== 'true') {\n        const err = ErrorHandler();\n        handleError(`LMSFinish failed with error code: ${err.code}`);\n      }\n    }\n\n    initialized = false;\n\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doLMSGetValue(name)\n   ** Inputs:  name - string representing the cmi data model defined category or\n   **             element (e.g. cmi.core.student_id)\n   ** Return:  The value presently assigned by the LMS to the cmi data model\n   **       element defined by the element or category identified by the name\n   **       input value.\n   **\n   ** Description:\n   ** Wraps the call to the LMS LMSGetValue method\n   **\n   *******************************************************************************/\n  function doLMSGetValue(name: any) {\n    const api = getAPIHandle();\n    let result = '';\n    if (api == null) {\n      handleError(\n        \"Unable to locate the LMS's API Implementation.\\nLMSGetValue was not successful.\"\n      );\n    } else if (!initialized && !doLMSInitialize()) {\n      const err = ErrorHandler(); // get why doLMSInitialize() returned false\n      handleError(\n        `LMSGetValue failed - Could not initialize communication with the LMS - error code: ${err.code}`\n      );\n    } else {\n      result = api.LMSGetValue(name);\n\n      const error = ErrorHandler();\n      if (error.code !== _NoError.code) {\n        // an error was encountered so display the error description\n        handleError(`LMSGetValue(${name}) failed. \n        ${error.code}: ${error.string}`);\n        result = '';\n      }\n    }\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doLMSSetValue(name, value)\n   ** Inputs:  name -string representing the data model defined category or element\n   **          value -the value that the named element or category will be assigned\n   ** Return:  true if successful\n   **          false if failed.\n   **\n   ** Description:\n   ** Wraps the call to the LMS LMSSetValue function\n   **\n   *******************************************************************************/\n  function doLMSSetValue(name: any, value: any) {\n    const api = getAPIHandle();\n    let result = 'false';\n    let err;\n    if (api == null) {\n      handleError(\n        \"Unable to locate the LMS's API Implementation.\\nLMSSetValue was not successful.\"\n      );\n    } else if (!initialized && !doLMSInitialize()) {\n      err = ErrorHandler(); // get why doLMSInitialize() returned false\n      handleError(\n        'LMSSetValue failed - Could not initialize communication with the LMS - error code: ' +\n          err.code\n      );\n    } else {\n      result = api.LMSSetValue(name, value);\n      if (result.toString() !== 'true') {\n        err = ErrorHandler();\n        handleError(\n          `LMSSetValue(${name}, ${value}) failed. \n          ${err.code}: ${err.string}`\n        );\n      }\n    }\n\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doLMSCommit()\n   ** Inputs:  None\n   ** Return:  true if successful\n   **          false if failed.\n   **\n   ** Description:\n   ** Commits the data to the LMS.\n   **\n   *******************************************************************************/\n  function doLMSCommit() {\n    const api = getAPIHandle();\n    let result = 'false';\n    let err;\n    if (api == null) {\n      handleError(\"Unable to locate the LMS's API Implementation.\\nLMSCommit was not successful.\");\n    } else if (!initialized && !doLMSInitialize()) {\n      err = ErrorHandler(); // get why doLMSInitialize() returned false\n      handleError(\n        `LMSCommit failed - Could not initialize communication with the LMS - error code: ${err.code}`\n      );\n    } else {\n      result = api.LMSCommit('');\n      if (result !== 'true') {\n        err = ErrorHandler();\n        handleError(`LMSCommit failed - error code: ${err.code}`);\n      }\n    }\n\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function ErrorHandler()\n   ** Inputs:  None\n   ** Return:  The current error\n   **\n   ** Description:\n   ** Determines if an error was encountered by the previous API call\n   ** and if so, returns the error.\n   **\n   ** Usage:\n   ** var last_error = ErrorHandler();\n   ** if (last_error.code != _NoError.code)\n   ** {\n   **    handleError(\"Encountered an error. Code: \" + last_error.code +\n   **                                \"\\nMessage: \" + last_error.string +\n   **                                \"\\nDiagnostics: \" + last_error.diagnostic);\n   ** }\n   *******************************************************************************/\n  function ErrorHandler() {\n    const error = { code: _NoError.code, string: _NoError.string, diagnostic: _NoError.diagnostic };\n    const api = getAPIHandle();\n    if (api == null) {\n      handleError(\n        \"Unable to locate the LMS's API Implementation.\\nCannot determine LMS error code.\"\n      );\n      error.code = _GeneralException.code;\n      error.string = _GeneralException.string;\n      error.diagnostic =\n        \"Unable to locate the LMS's API Implementation. Cannot determine LMS error code.\";\n      return error;\n    }\n\n    // check for errors caused by or from the LMS\n    error.code = api.LMSGetLastError().toString();\n    if (error.code !== _NoError.code) {\n      // an error was encountered so display the error description\n      error.string = api.LMSGetErrorString(error.code);\n      error.diagnostic = api.LMSGetDiagnostic('');\n    }\n\n    return error;\n  }\n\n  /******************************************************************************\n   **\n   ** Function getAPIHandle()\n   ** Inputs:  None\n   ** Return:  value contained by APIHandle\n   **\n   ** Description:\n   ** Returns the handle to API object if it was previously set,\n   ** otherwise it returns null\n   **\n   *******************************************************************************/\n  function getAPIHandle() {\n    if (apiHandle == null) {\n      apiHandle = getAPI();\n    }\n\n    return apiHandle;\n  }\n\n  /*******************************************************************************\n   **\n   ** Function findAPI(win)\n   ** Inputs:  win - a Window Object\n   ** Return:  If an API object is found, it's returned, otherwise null is returned\n   **\n   ** Description:\n   ** This function looks for an object named API in parent and opener windows\n   **\n   *******************************************************************************/\n  function findAPI(win: any) {\n    let findAPITries = 0;\n    while (win.API == null && win.parent != null && win.parent !== win) {\n      findAPITries++;\n      // Note: 7 is an arbitrary number, but should be more than sufficient\n      if (findAPITries > 7) {\n        handleError('Error finding API -- too deeply nested.');\n        return null;\n      }\n\n      win = win.parent;\n    }\n    return win.API;\n  }\n\n  /*******************************************************************************\n   **\n   ** Function getAPI()\n   ** Inputs:  none\n   ** Return:  If an API object is found, it's returned, otherwise null is returned\n   **\n   ** Description:\n   ** This function looks for an object named API, first in the current window's\n   ** frame hierarchy and then, if necessary, in the current window's opener window\n   ** hierarchy (if there is an opener window).\n   **\n   *******************************************************************************/\n  function getAPI() {\n    let theAPI = findAPI(window);\n    if (theAPI == null && window.opener != null && typeof window.opener != 'undefined') {\n      theAPI = findAPI(window.opener);\n    }\n\n    return theAPI;\n  }\n}\n/* eslint-enable */\n","/* eslint-disable */\nimport { isPassed } from 'utils/comparison';\nimport { decodeJson } from 'utils/string';\nconst self: { [key: string]: any } = {\n  initialized: false,\n  apiWrapper: getApiWrapper(),\n  startTime: null\n};\n\nconst CMI_SUSPEND_DATA = 'cmi.suspend_data';\nconst CMI_CORE_EXIT = 'cmi.exit';\nconst CMI_CORE_COMPLETION_STATUS = 'cmi.completion_status';\nconst CMI_CORE_SUCCESS_STATUS = 'cmi.success_status';\n\nconst errorHandlers: any = [console.log.bind(console)]; // Array which contains all error handlers (use addErrorHandler method to add new handlers)\n\nconst lmsReporting: { [key: string]: any } = {\n  initialize() {\n    self.initialized = self.apiWrapper.doLMSInitialize() === 'true';\n    self.apiWrapper.doLMSSetValue(CMI_CORE_COMPLETION_STATUS, 'incomplete');\n    self.apiWrapper.doLMSSetValue(CMI_CORE_SUCCESS_STATUS, 'unknown');\n\n    if (self.initialized) {\n      self.startTime = new Date();\n      if (window.addEventListener) {\n        window.addEventListener('unload', endSession);\n        window.addEventListener('beforeunload', showWarningMessage);\n      }\n    }\n  },\n\n  progressProvider: {\n    getProgress,\n    saveProgress,\n    removeProgress\n  },\n\n  userInfoProvider: {\n    getUsername() {\n      return self.apiWrapper.doLMSGetValue('cmi.learner_name');\n    },\n    getAccountId() {\n      return self.apiWrapper.doLMSGetValue('cmi.learner_id');\n    },\n    getAccountHomePage() {\n      return window.location.origin || `${window.location.protocol}//${window.location.host}`;\n    }\n  },\n\n  courseFinished: sendCourseResults,\n  courseFinalized: finalizeCourseSession,\n\n  addErrorHandler\n};\n\nexport default lmsReporting;\n\nfunction addErrorHandler(handler: any) {\n  errorHandlers.push(handler);\n}\n\nfunction handleError(msg: any) {\n  for (let index = 0; index < errorHandlers.length; index++) {\n    errorHandlers[index](msg);\n  }\n}\n\nfunction endSession() {\n  const endTime = new Date();\n  const duration = endTime.getTime() - self.startTime.getTime();\n  self.apiWrapper.doLMSSetValue('cmi.session_time', convertTimeSpanToLmsTimeString(duration));\n  self.apiWrapper.doLMSCommit();\n\n  self.apiWrapper.doLMSFinish();\n}\n\nfunction showWarningMessage(event: any) {\n  event.preventDefault();\n  event.returnValue = '';\n  return '';\n}\n\nfunction convertTimeSpanToLmsTimeString(duration: any) {\n  const milliseconds = Math.round((duration % 1000) / 10),\n    seconds = Math.floor((duration / 1000) % 60),\n    minutes = Math.floor((duration / (1000 * 60)) % 60),\n    hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n\n  const millisecondsStr = milliseconds > 0 ? `.${milliseconds}` : '';\n  return `PT${hours}H${minutes}M${seconds}${millisecondsStr}S`;\n}\n\nfunction getProgress() {\n  let progress: any = {};\n  try {\n    progress = JSON.parse(decodeJson(self.apiWrapper.doLMSGetValue(CMI_SUSPEND_DATA)));\n  } catch (e) {\n    handleError('Unable to restore progress');\n  }\n  return progress;\n}\n\nfunction saveProgress(progress: any) {\n  const progressResult =\n    self.apiWrapper.doLMSSetValue(CMI_SUSPEND_DATA, JSON.stringify(progress)) === 'true';\n  const statusResult =\n    self.apiWrapper.doLMSSetValue(CMI_CORE_COMPLETION_STATUS, 'incomplete') === 'true';\n  const result = progressResult && statusResult;\n  if (result) {\n    self.apiWrapper.doLMSSetValue(CMI_CORE_EXIT, 'suspend');\n    self.apiWrapper.doLMSCommit();\n  }\n  return result;\n}\n\nfunction removeProgress() {\n  const result = self.apiWrapper.doLMSSetValue(CMI_SUSPEND_DATA, '') === 'true';\n  if (result) {\n    self.apiWrapper.doLMSSetValue(CMI_CORE_EXIT, '');\n    self.apiWrapper.doLMSCommit();\n  }\n\n  return result;\n}\n\nfunction updateScore(score: any) {\n  self.apiWrapper.doLMSSetValue('cmi.score.min', '0');\n  self.apiWrapper.doLMSSetValue('cmi.score.max', '100');\n  self.apiWrapper.doLMSSetValue('cmi.score.raw', score);\n  self.apiWrapper.doLMSSetValue('cmi.score.scaled', score / 100);\n}\n\nfunction sendCourseResults(course: any) {\n  self.apiWrapper.doLMSSetValue(CMI_CORE_COMPLETION_STATUS, 'completed');\n  self.apiWrapper.doLMSSetValue(\n    CMI_CORE_SUCCESS_STATUS,\n    isPassed(course.status) ? 'passed' : 'failed'\n  );\n  updateScore(course.score);\n  self.apiWrapper.doLMSCommit();\n}\n\nfunction finalizeCourseSession(course: any) {\n  if (window.removeEventListener) {\n    window.removeEventListener('unload', endSession);\n    window.removeEventListener('beforeunload', showWarningMessage);\n  }\n  if (!course.isCourseFinished) {\n    updateScore(course.score);\n  }\n  endSession();\n}\n\nfunction getApiWrapper() {\n  var debug = true; // set this to false to turn debugging off\n  var output = window.console; // output can be set to any object that has a log(string) function\n  // such as: var output = { log: function(str){alert(str);} };\n\n  // Define exception/error codes\n  const _NoError = { code: '0', string: 'No Error', diagnostic: 'No Error' };\n  const _GeneralException = {\n    code: '101',\n    string: 'General Exception',\n    diagnostic: 'General Exception'\n  };\n  const _AlreadyInitialized = {\n    code: '103',\n    string: 'Already Initialized',\n    diagnostic: 'Already Initialized'\n  };\n\n  let initialized = false;\n\n  // local variable definitions\n  let apiHandle: any = null;\n\n  return {\n    doLMSInitialize: doInitialize,\n    doLMSFinish: doTerminate,\n    doLMSGetValue: doGetValue,\n    doLMSSetValue: doSetValue,\n    doLMSCommit: doCommit\n  };\n\n  /*******************************************************************************\n   **\n   ** Function: doInitialize()\n   ** Inputs:  None\n   ** Return:  true if the initialization was successful, or\n   **          false if the initialization failed.\n   **\n   ** Description:\n   ** Initialize communication with LMS by calling the Initialize\n   ** function which will be implemented by the LMS.\n   **\n   *******************************************************************************/\n  function doInitialize() {\n    if (initialized) {\n      return 'true';\n    }\n\n    var api = getAPIHandle();\n    if (api == null) {\n      message(\"Unable to locate the LMS's API Implementation.\\nInitialize was not successful.\");\n      return 'false';\n    }\n\n    var result = api.Initialize('');\n\n    if (result.toString() !== 'true') {\n      var err = ErrorHandler();\n      message(`Initialize failed with error code: ${err.code}`);\n    } else {\n      initialized = true;\n    }\n\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doTerminate()\n   ** Inputs:  None\n   ** Return:  true if successful\n   **          false if failed.\n   **\n   ** Description:\n   ** Close communication with LMS by calling the Terminate\n   ** function which will be implemented by the LMS\n   **\n   *******************************************************************************/\n  function doTerminate() {\n    if (!initialized) {\n      return 'true';\n    }\n\n    var api = getAPIHandle();\n    // call the Terminate function that should be implemented by the API\n    var result = api.Terminate('');\n    if (api == null) {\n      message(\"Unable to locate the LMS's API Implementation.\\nTerminate was not successful.\");\n      return 'false';\n    } else {\n      if (result.toString() !== 'true') {\n        var err = ErrorHandler();\n        message(`Terminate failed with error code: ${err.code}`);\n      }\n    }\n\n    initialized = false;\n\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doGetValue(name)\n   ** Inputs:  name - string representing the cmi data model defined category or\n   **             element (e.g. cmi.learner_id)\n   ** Return:  The value presently assigned by the LMS to the cmi data model\n   **       element defined by the element or category identified by the name\n   **       input value.\n   **\n   ** Description:\n   ** Wraps the call to the GetValue method\n   **\n   *******************************************************************************/\n  function doGetValue(name: any) {\n    var api = getAPIHandle();\n    var result = '';\n    if (api == null) {\n      message(\"Unable to locate the LMS's API Implementation.\\nGetValue was not successful.\");\n    } else if (!initialized && !doInitialize()) {\n      var err = ErrorHandler();\n      message(\n        `GetValue failed - Could not initialize communication with the LMS - error code: ${err.code}`\n      );\n    } else {\n      result = api.GetValue(name);\n\n      var error = ErrorHandler();\n      if (error.code !== _NoError.code) {\n        // an error was encountered so display the error description\n        message(`GetValue(${name}) failed.\n         ${error.code}: ${error.string}`);\n        result = '';\n      }\n    }\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doSetValue(name, value)\n   ** Inputs:  name -string representing the data model defined category or element\n   **          value -the value that the named element or category will be assigned\n   ** Return:  true if successful\n   **          false if failed.\n   **\n   ** Description:\n   ** Wraps the call to the SetValue function\n   **\n   *******************************************************************************/\n  function doSetValue(name: any, value: any) {\n    var api = getAPIHandle();\n    var result = 'false';\n    if (api == null) {\n      message(\"Unable to locate the LMS's API Implementation.\\nSetValue was not successful.\");\n    } else if (!initialized && !doInitialize()) {\n      var error = ErrorHandler();\n      message(\n        `SetValue failed - Could not initialize communication with the LMS - error code: ${error.code}`\n      );\n    } else {\n      result = api.SetValue(name, value);\n      if (result.toString() !== 'true') {\n        var err = ErrorHandler();\n        message(`SetValue(${name}, ${value}) failed. \n        ${err.code}: ${err.string}`);\n      }\n    }\n\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doCommit()\n   ** Inputs:  None\n   ** Return:  true if successful\n   **          false if failed\n   **\n   ** Description:\n   ** Commits the data to the LMS.\n   **\n   *******************************************************************************/\n  function doCommit() {\n    var api = getAPIHandle();\n    var result = 'false';\n    if (api == null) {\n      message(\"Unable to locate the LMS's API Implementation.\\nCommit was not successful.\");\n    } else if (!initialized && !doInitialize()) {\n      var error = ErrorHandler();\n      message(\n        `Commit failed - Could not initialize communication with the LMS - error code: ${error.code}`\n      );\n    } else {\n      result = api.Commit('');\n      if (result !== 'true') {\n        var err = ErrorHandler();\n        message(`Commit failed - error code: ${err.code}`);\n      }\n    }\n\n    return result.toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doGetLastError()\n   ** Inputs:  None\n   ** Return:  The error code that was set by the last LMS function call\n   **\n   ** Description:\n   ** Call the GetLastError function\n   **\n   *******************************************************************************/\n  function doGetLastError() {\n    var api = getAPIHandle();\n    if (api == null) {\n      message(\"Unable to locate the LMS's API Implementation.\\nGetLastError was not successful.\");\n      //since we can't get the error code from the LMS, return a general error\n      return _GeneralException.code;\n    }\n\n    return api.GetLastError().toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doGetErrorString(errorCode)\n   ** Inputs:  errorCode - Error Code\n   ** Return:  The textual description that corresponds to the input error code\n   **\n   ** Description:\n   ** Call the GetErrorString function\n   **\n   ********************************************************************************/\n  function doGetErrorString(errorCode: any) {\n    var api = getAPIHandle();\n    if (api == null) {\n      message(\"Unable to locate the LMS's API Implementation.\\nGetErrorString was not successful.\");\n      return _GeneralException.string;\n    }\n\n    return api.GetErrorString(errorCode).toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function doGetDiagnostic(errorCode)\n   ** Inputs:  errorCode - Error Code(integer format), or null\n   ** Return:  The vendor specific textual description that corresponds to the\n   **          input error code\n   **\n   ** Description:\n   ** Call the LMSGetDiagnostic function\n   **\n   *******************************************************************************/\n  function doGetDiagnostic(errorCode: any) {\n    var api = getAPIHandle();\n    if (api == null) {\n      message(\"Unable to locate the LMS's API Implementation.\\nGetDiagnostic was not successful.\");\n      return \"Unable to locate the LMS's API Implementation. GetDiagnostic was not successful.\";\n    }\n\n    return api.GetDiagnostic(errorCode).toString();\n  }\n\n  /*******************************************************************************\n   **\n   ** Function ErrorHandler()\n   ** Inputs:  None\n   ** Return:  The current error\n   **\n   ** Description:\n   ** Determines if an error was encountered by the previous API call\n   ** and if so, returns the error.\n   **\n   ** Usage:\n   ** var last_error = ErrorHandler();\n   ** if (last_error.code != _NoError.code)\n   ** {\n   **    message(\"Encountered an error. Code: \" + last_error.code +\n   **                                \"\\nMessage: \" + last_error.string +\n   **                                \"\\nDiagnostics: \" + last_error.diagnostic);\n   ** }\n   *******************************************************************************/\n  function ErrorHandler() {\n    var error = { code: _NoError.code, string: _NoError.string, diagnostic: _NoError.diagnostic };\n    var api = getAPIHandle();\n    if (api == null) {\n      message(\"Unable to locate the LMS's API Implementation.\\nCannot determine LMS error code.\");\n      error.code = _GeneralException.code;\n      error.string = _GeneralException.string;\n      error.diagnostic =\n        \"Unable to locate the LMS's API Implementation. Cannot determine LMS error code.\";\n      return error;\n    }\n\n    // check for errors caused by or from the LMS\n    error.code = api.GetLastError().toString();\n    if (error.code !== _NoError.code) {\n      // an error was encountered so display the error description\n      error.string = api.GetErrorString(error.code);\n      error.diagnostic = api.GetDiagnostic('');\n    }\n\n    return error;\n  }\n\n  /******************************************************************************\n   **\n   ** Function getAPIHandle()\n   ** Inputs:  None\n   ** Return:  value contained by APIHandle\n   **\n   ** Description:\n   ** Returns the handle to API object if it was previously set,\n   ** otherwise it returns null\n   **\n   *******************************************************************************/\n  function getAPIHandle() {\n    if (apiHandle == null) {\n      apiHandle = getAPI();\n    }\n\n    return apiHandle;\n  }\n\n  /*******************************************************************************\n   **\n   ** Function findAPI(win)\n   ** Inputs:  win - a Window Object\n   ** Return:  If an API object is found, it's returned, otherwise null is returned\n   **\n   ** Description:\n   ** This function looks for an object named API_1484_11 in parent and opener\n   ** windows\n   **\n   *******************************************************************************/\n  function findAPI(win: any) {\n    var findAPITries = 0;\n    while (win.API_1484_11 == null && win.parent != null && win.parent !== win) {\n      findAPITries++;\n\n      if (findAPITries > 500) {\n        message('Error finding API -- too deeply nested.');\n        return null;\n      }\n\n      win = win.parent;\n    }\n    return win.API_1484_11;\n  }\n\n  /*******************************************************************************\n   **\n   ** Function getAPI()\n   ** Inputs:  none\n   ** Return:  If an API object is found, it's returned, otherwise null is returned\n   **\n   ** Description:\n   ** This function looks for an object named API_1484_11, first in the current window's\n   ** frame hierarchy and then, if necessary, in the current window's opener window\n   ** hierarchy (if there is an opener window).\n   **\n   *******************************************************************************/\n  function getAPI() {\n    var theAPI = findAPI(window);\n    if (theAPI == null && window.opener != null && typeof window.opener != 'undefined') {\n      theAPI = findAPI(window.opener);\n    }\n    if (theAPI == null) {\n      message('Unable to find an API adapter');\n    }\n    return theAPI;\n  }\n\n  /*******************************************************************************\n   **\n   ** Function findObjective(objId)\n   ** Inputs:  objId - the id of the objective\n   ** Return:  the index where this objective is located\n   **\n   ** Description:\n   ** This function looks for the objective within the objective array and returns\n   ** the index where it was found or it will create the objective for you and return\n   ** the new index.\n   **\n   *******************************************************************************/\n  function findObjective(objId: any) {\n    var num = +doGetValue('cmi.objectives._count');\n    var objIndex = -1;\n\n    for (var i = 0; i < num; ++i) {\n      if (doGetValue(`cmi.objectives.${i}.id`) === objId) {\n        objIndex = i;\n        break;\n      }\n    }\n\n    if (objIndex === -1) {\n      message(`Objective ${objId} not found.`);\n      objIndex = num;\n      message(`Creating new objective at index ${objIndex}`);\n      doSetValue(`cmi.objectives.${objIndex}.id`, objId);\n    }\n    return objIndex;\n  }\n\n  /*******************************************************************************\n   ** NOTE: This is a SCORM 2004 4th Edition feature.\n   *\n   ** Function findDataStore(id)\n   ** Inputs:  id - the id of the data store\n   ** Return:  the index where this data store is located or -1 if the id wasn't found\n   **\n   ** Description:\n   ** This function looks for the data store within the data array and returns\n   ** the index where it was found or returns -1 to indicate the id wasn't found\n   ** in the collection.\n   **\n   ** Usage:\n   ** var dsIndex = findDataStore(\"myds\");\n   ** if (dsIndex > -1)\n   ** {\n   **    doSetValue(\"adl.data.\" + dsIndex + \".store\", \"save this info...\");\n   ** }\n   ** else\n   ** {\n   **    var appending_data = doGetValue(\"cmi.suspend_data\");\n   **    doSetValue(\"cmi.suspend_data\", appending_data + \"myds:save this info\");\n   ** }\n   *******************************************************************************/\n  function findDataStore(id: any) {\n    var num = +doGetValue('adl.data._count');\n    var index = -1;\n\n    // if the get value was not null and is a number\n    // in other words, we got an index in the adl.data array\n    if (num != null && !isNaN(num)) {\n      for (var i = 0; i < num; ++i) {\n        if (doGetValue(`adl.data.${i}.id`) === id) {\n          index = i;\n          break;\n        }\n      }\n\n      if (index === -1) {\n        message(`Data store ${id} not found.`);\n      }\n    }\n\n    return index;\n  }\n\n  /*******************************************************************************\n   **\n   ** Function message(str)\n   ** Inputs:  String - message you want to send to the designated output\n   ** Return:  none\n   ** Depends on: boolean debug to indicate if output is wanted\n   **             object output to handle the messages. must implement a function\n   **             log(string)\n   **\n   ** Description:\n   ** This function outputs messages to a specified output. You can define your own\n   ** output object. It will just need to implement a log(string) function. This\n   ** interface was used so that the output could be assigned the window.console object.\n   *******************************************************************************/\n  function message(str: any) {\n    if (debug) {\n      output.log(str);\n    }\n  }\n}\n/* eslint-enable */\n","import eventEmitter, { events } from 'core/events/eventEmitter';\nimport lms from './lms';\nimport lms2004 from './lms2004';\n\nclass LmsEventHandler {\n  apiWrapper: any;\n\n  on(is2004: boolean) {\n    this.apiWrapper = is2004 ? lms2004 : lms;\n\n    eventEmitter.on(events.COURSE_FINISHED, this.apiWrapper.courseFinished);\n    eventEmitter.on(events.COURSE_FINALIZED, this.apiWrapper.courseFinalized);\n  }\n\n  off() {\n    eventEmitter.off(events.COURSE_FINISHED, this.apiWrapper.courseFinished);\n    eventEmitter.off(events.COURSE_FINALIZED, this.apiWrapper.courseFinalized);\n  }\n}\n\nexport default new LmsEventHandler();\n","import eventHandler from './eventHandler';\nimport lms from './lms';\nimport lms2004 from './lms2004';\n\nclass Scorm {\n  apiWrapper: any;\n\n  get addErrorHandler() {\n    return this.apiWrapper.addErrorHandler;\n  }\n\n  get userInfoProvider() {\n    return this.apiWrapper.userInfoProvider;\n  }\n\n  get progressProvider() {\n    return this.apiWrapper.progressProvider;\n  }\n\n  async initialize(is2004: boolean) {\n    this.apiWrapper = is2004 ? lms2004 : lms;\n    \n    this.apiWrapper.initialize();\n    eventHandler.on(is2004);\n  }\n}\n\nexport default new Scorm();\n"],"sourceRoot":""}