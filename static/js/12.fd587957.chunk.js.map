{"version":3,"sources":["pages/resource/resourceOverview/ResourceOverview.styled.ts","pages/resource/resourceFooter/ResourceFooter.styled.ts","pages/resource/resourceFooter/ResourceFooter.tsx","components/popups/closeResourcePopup/CloseResourcePopup.styled.ts","components/popups/closeResourcePopup/CloseResourcePopup.tsx","pages/resource/checklist/ChecklistPage.tsx","pages/resource/resourceHeader/ResourceHeader.styled.ts","pages/resource/resourceHeader/ResourceHeader.tsx","pages/resource/howto/HowToPage.tsx","pages/resource/resourceOverview/ResourceOverview.tsx","utils/customEventPolyfill.ts","pages/resource/Resource.tsx"],"names":["ResourceLayout","styled","PageContent","getCustomScrollbars","props","bodyBackground","background","body","AdaptiveContainer","div","media","xlarge","tablet","small","Separator","hr","transparentize","theme","colors","textColor","ResourceFooter","onClose","buttonText","resourceProgress","Button","layout","BUTTON","LAYOUT","PRIMARY","SECONDARY","onClick","defaultProps","TextElement","span","secondaryFont","CloseResourcePopup","localize","CheckListPage","closeResourcePopup","popupActions","openPopup","popupId","POPUP_ID_CLOSE_RESOURCE","popupAriaLabelKey","component","disablePopupClosing","closePopupByTap","document","title","this","contents","checklistProgress","Contents","items","linkTabIndex","Component","connect","state","getResourceContents","getChecklistProgress","dispatch","bindActionCreators","Logo","img","attrs","alt","src","url","ResourceType","fonts","fontFamily","solidColor","showLogo","ResourceTitle","Text","logoUrl","getLogo","resourceType","getResourceType","resourceTitle","getResourceTitle","isMainLogoShown","resourceTypeText","RESOURCE_TYPE","CHECKLIST","HOWTO","appearance","HowToPage","ResourceOverview","window","CustomEvent","customEvent","params","bubbles","cancelable","detail","evt","createEvent","initCustomEvent","customEventPolyfill","resourceScrollContainer","getElementsByClassName","event","addEventListener","dispatchEvent","createCustomScrollEvent","type","Error","className","getResourcePage","PureComponent","withNavigation","getBackground","connector","resourceActions","userActions","isLowResolution","typeAccess","userAccessIsLimited","IS_NO_ACCESS","IS_SUCCESSFUL_ACCESS","useEffect","a","async","skipAuthentication","launch","urlToNavigate","navigateToUrl","navigate","Route","render","location","RouteTransition","isTocExpanded","Switch","exact","path","INDEX_PATH","componentNoAccess","NoAccess","RESOURCE_PATH","NotFoundPage"],"mappings":"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","file":"static/js/12.fd587957.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { bodyBackground } from 'components/mixins/backgrounds';\nimport { PageContent } from 'components/shell/Layout';\nimport media from 'components/mixins/media';\nimport { getCustomScrollbars } from 'components/mixins/customScrollbars';\n\n\ntype ResourceLayoutProps = {\n    background: any\n}\nexport const ResourceLayout = styled(PageContent) <ResourceLayoutProps>`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    ${getCustomScrollbars()}\n    ${props => bodyBackground(props.background.body)};\n`;\n\nexport const AdaptiveContainer = styled.div`\n    width: 880px;\n    margin: 0 auto;\n    padding: 24px 0 120px 0;\n\n    ${media.xlarge`\n        width: 750px;\n    `}\n\n    ${media.tablet`\n        width: 560px;\n    `}\n\n    ${media.small`\n        width: 100%;\n        padding: 54px 30px 120px;\n    `};\n`; \n","import styled from 'styled-components';\nimport { transparentize } from 'utils/color';\n\nexport const Separator = styled.hr`\n    border-color: ${props => transparentize(props.theme.colors.textColor, 0.05)};\n    border-width: 1px;\n    margin: 40px auto;\n`;\n","import React, { Fragment } from 'react';\nimport Button from 'components/common/Button';\nimport { BUTTON } from 'constants/components';\n\nimport { Separator } from './ResourceFooter.styled';\n\ntype ResourceFooterProps = {\n  onClose(): void;\n  buttonText: string;\n  resourceProgress: number;\n};\n\nconst ResourceFooter = (props: ResourceFooterProps) => {\n  const { onClose, buttonText, resourceProgress } = props;\n  return (\n    <Fragment>\n      <Separator />\n      <Button\n        layout={resourceProgress === 100 ? BUTTON.LAYOUT.PRIMARY : BUTTON.LAYOUT.SECONDARY}\n        onClick={onClose}\n      >\n        {buttonText}\n      </Button>\n    </Fragment>\n  );\n};\n\nResourceFooter.defaultProps = {\n  resourceProgress: 100\n};\n\nexport default ResourceFooter;\n","import styled from 'styled-components';\nimport { secondaryFont } from 'components/mixins/typography';\n\nexport const TextElement = styled.span`\n  &&& {\n    ${secondaryFont}\n    text-align: center;\n    color: ${props => props.theme.colors.textColor};\n    font-size: 20px !important;\n  }\n`;\n","import * as React from 'react';\nimport { localize } from 'core/localization';\nimport { TextElement } from './CloseResourcePopup.styled';\n\nconst CloseResourcePopup = () => {\n  return <TextElement>{localize('[you can close browser tab]')}</TextElement>;\n};\n\nexport default CloseResourcePopup;\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { getResourceContents } from 'store/resource/selectors';\nimport Contents from 'components/contents/Contents';\nimport { getChecklistProgress } from 'store/resource/checklist/selectors';\nimport * as popupActions from 'store/popup/actions';\nimport { localize } from 'core/localization';\nimport ResourceFooter from 'pages/resource/resourceFooter';\n\nimport { RootAppState } from 'store/types';\nimport CloseResourcePopup from 'components/popups/closeResourcePopup';\nimport { POPUP_ID_CLOSE_RESOURCE } from 'constants/popups';\n\ntype ChecklistPageProps = {\n  contents: [];\n  checklistProgress: number;\n  popupActions: { [key: string]: any };\n};\n\nexport class CheckListPage extends Component<ChecklistPageProps> {\n  closeResourcePopup = () => {\n    this.props.popupActions.openPopup({\n      popupId: POPUP_ID_CLOSE_RESOURCE,\n      popupAriaLabelKey: '[aria label close course popup]',\n      component: CloseResourcePopup,\n      disablePopupClosing: true,\n      closePopupByTap: false\n    });\n  };\n\n  componentDidMount() {\n    document.title = `${localize('[title for checklist page]')}`;\n  }\n\n  render() {\n    const { contents, checklistProgress } = this.props;\n    return (\n      <Fragment>\n        <Contents items={contents} linkTabIndex={0} />\n        <ResourceFooter\n          onClose={this.closeResourcePopup}\n          buttonText={localize('[close checklist]')}\n          resourceProgress={checklistProgress}\n        />\n      </Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state: RootAppState) {\n  return {\n    contents: getResourceContents(state),\n    checklistProgress: getChecklistProgress(state)\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    popupActions: bindActionCreators(popupActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckListPage);\n","import styled from 'styled-components';\nimport Text from 'components/common/Text';\nimport { transparentize } from 'utils/color';\n\ntype LogoTypes = {\n    url: string\n}\nexport const Logo = styled.img.attrs((props: LogoTypes) => ({\n    alt: 'Company logo',\n    src: `${props.url}`\n})) <LogoTypes>`\n    display: block;\n    width: auto;\n    height: 71px;\n`\n\ntype ResourceTypeProps = {\n    showLogo?: boolean;\n}\nexport const ResourceType = styled.span<ResourceTypeProps>`\n    display: inline-block;\n    font-family: ${props => props.theme.fonts.secondaryFont.fontFamily};\n    font-size: 16px;\n    font-weight: 600;\n    color: ${props => transparentize(props.theme.colors.textColor, 0.5, { solidColor: true })};\n    margin-top: ${props => props.showLogo ? `48px` : `56px`};\n`;\n\nexport const ResourceTitle = styled(Text)`\n    margin: 16px 0 24px;\n`;\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { getLogo, isMainLogoShown } from 'store/settings/selectors';\nimport { getResourceType, getResourceTitle } from 'store/resource/selectors';\nimport { RootAppState } from 'store/types';\nimport { RESOURCE_TYPE } from 'constants/common';\nimport { localize } from 'core/localization';\n\nimport { Logo, ResourceType, ResourceTitle } from './ResourceHeader.styled';\n\ntype ResourceHeaderProps = {\n    logoUrl: string,\n    resourceType: string,\n    resourceTitle: string,\n    showLogo?: boolean;\n}\nconst ResourceHeader = (props: ResourceHeaderProps) => {\n    const resourceTypeText: { [key: string]: string } = {\n        [RESOURCE_TYPE.CHECKLIST]: localize('[checklist]'),\n        [RESOURCE_TYPE.HOWTO]: localize('[how to]')\n    }\n    const { logoUrl, resourceType, resourceTitle, showLogo } = props;\n\n    return (\n        <Fragment>\n            {showLogo && <Logo url={logoUrl} />}\n            <ResourceType showLogo={showLogo}>{resourceTypeText[resourceType]}</ResourceType>\n            <ResourceTitle appearance=\"h1\">{resourceTitle}</ResourceTitle>\n        </Fragment>\n    )\n}\n\nfunction mapStateToProps(state: RootAppState) {\n    return {\n        logoUrl: getLogo(state),\n        resourceType: getResourceType(state),\n        resourceTitle: getResourceTitle(state),\n        showLogo: isMainLogoShown(state)\n    }\n}\n\nexport default connect(mapStateToProps)(ResourceHeader);\n","import Contents from 'components/contents/Contents';\nimport { localize } from 'core/localization';\nimport ResourceFooter from 'pages/resource/resourceFooter';\n\nimport React, { Component } from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\n\nimport * as popupActions from 'store/popup/actions';\nimport { getResourceContents } from 'store/resource/selectors';\nimport { RootAppState } from 'store/types';\n\nimport CloseResourcePopup from 'components/popups/closeResourcePopup';\nimport { POPUP_ID_CLOSE_RESOURCE } from 'constants/popups';\n\ninterface HowToPageProps {\n  contents: [];\n  popupActions: { [key: string]: any };\n}\n\nexport class HowToPage extends Component<HowToPageProps> {\n  public closeResourcePopup = () => {\n    this.props.popupActions.openPopup({\n      popupId: POPUP_ID_CLOSE_RESOURCE,\n      popupAriaLabelKey: '[aria label close course popup]',\n      component: CloseResourcePopup,\n      disablePopupClosing: true,\n      closePopupByTap: false\n    });\n  };\n\n  public componentDidMount() {\n    document.title = `${localize('[how to]')}`;\n  }\n\n  public render() {\n    const { contents } = this.props;\n    return (\n      <>\n        <Contents items={contents} linkTabIndex={0} />\n        <ResourceFooter onClose={this.closeResourcePopup} buttonText={localize('[close how to]')} />\n      </>\n    );\n  }\n}\n\nfunction mapStateToProps(state: RootAppState) {\n  return {\n    contents: getResourceContents(state)\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    popupActions: bindActionCreators(popupActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HowToPage);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport withNavigation from 'components/hocs/withNavigation';\nimport { getBackground } from 'store/settings/selectors';\nimport { getResourceType } from 'store/resource/selectors';\nimport customEventPolyfill from 'utils/customEventPolyfill';\n\nimport { RootAppState } from 'store/types';\nimport { RESOURCE_TYPE } from 'constants/common';\nimport { ResourceLayout, AdaptiveContainer } from './ResourceOverview.styled';\nimport CheckListPage from '../checklist';\nimport ResourceHeader from '../resourceHeader';\nimport HowToPage from '../howto';\n\ntype ResourceOverviewProps = {\n  navigateToUrl(url: string): void;\n  theme: { [key: string]: any };\n  background: { [key: string]: any };\n  resourceType: string;\n};\n\nexport class ResourceOverview extends PureComponent<ResourceOverviewProps, {}> {\n  createCustomScrollEvent() {\n    customEventPolyfill();\n\n    const resourceScrollContainer = document.getElementsByClassName('resource-scroll-container')[0];\n    const event = new CustomEvent('scrollPage', { bubbles: true });\n    resourceScrollContainer.addEventListener('scroll', () => window.dispatchEvent(event));\n  }\n\n  componentDidMount() {\n    const { resourceType } = this.props;\n    if (resourceType === RESOURCE_TYPE.CHECKLIST) {\n      this.createCustomScrollEvent();\n    }\n  }\n\n  getResourcePage(type: string) {\n    switch (type) {\n      case RESOURCE_TYPE.CHECKLIST:\n        return <CheckListPage />;\n      case RESOURCE_TYPE.HOWTO:\n        return <HowToPage />;\n      default:\n        return new Error(`Resource type: '${type}' not supported`);\n    }\n  }\n\n  render() {\n    const { background, resourceType } = this.props;\n    return (\n      <ResourceLayout className=\"resource-scroll-container\" background={background}>\n        <AdaptiveContainer>\n          <ResourceHeader />\n          {this.getResourcePage(resourceType)}\n        </AdaptiveContainer>\n      </ResourceLayout>\n    );\n  }\n}\n\nfunction mapStateToProps(state: RootAppState) {\n  return {\n    background: getBackground(state),\n    resourceType: getResourceType(state)\n  };\n}\n\nexport default withNavigation(connect(mapStateToProps)(ResourceOverview));\n","export default function () {\n\n    if (typeof window.CustomEvent !== \"function\") {\n        function CustomEvent(customEvent: any, params: any) {\n            params = params || { bubbles: false, cancelable: false, detail: null };\n            const evt = document.createEvent('CustomEvent');\n            evt.initCustomEvent(customEvent, params.bubbles, params.cancelable, params.detail);\n            return evt;\n        }\n\n        (window as any).CustomEvent = CustomEvent;\n    }\n}\n","import React, { useEffect } from 'react';\nimport { Route, Switch } from 'react-router';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { ThemeProvider } from 'styled-components';\nimport * as resourceActions from 'store/resource/actions';\nimport * as userActions from 'store/user/actions';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport RouteTransition from '../../components/shell/RouteTransition/RouteTransition';\nimport { PrivateRoute } from '../../components/common';\nimport { INDEX_PATH, RESOURCE_PATH } from '../../constants/navigation';\nimport ResourceOverview from './resourceOverview/ResourceOverview';\nimport NoAccess from '../errors/noAccess/LimitAccessPage';\nimport NotFoundPage from '../errors/notFound/NotFoundPage';\nimport Layout from '../../components/shell/Layout/Layout';\nimport { IS_NO_ACCESS, IS_SUCCESSFUL_ACCESS } from '../../constants/typeAccess';\n\ntype ResourceProps = {\n  colors: { [key: string]: any };\n  fonts: { [key: string]: any };\n  background: { [key: string]: any };\n  isLowResolution: boolean;\n  isTocExpanded: boolean;\n  isUserAuthenticated: boolean;\n  location: { [key: string]: any };\n  userAccessIsLimited: boolean;\n  navigateToUrl(url: string): void;\n};\n\nconst Resource = (props: ResourceProps & ConnectedProps<typeof connector>) => {\n  const { colors, fonts, background, isLowResolution, userAccessIsLimited } = props;\n  const typeAccess = userAccessIsLimited ? IS_NO_ACCESS : IS_SUCCESSFUL_ACCESS;\n\n  useEffect(() => {\n    const skipAuthentication = async () => {\n      await props.userActions.skipAuthentication();\n    };\n    const navigate = async () => {\n      const urlToNavigate: any = await props.resourceActions.launch();\n      props.navigateToUrl(urlToNavigate);\n    };\n\n    skipAuthentication();\n    navigate();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Route\n      render={({ location }) => (\n        <ThemeProvider theme={{ colors, fonts }}>\n          <RouteTransition\n            location={location}\n            isLowResolution={isLowResolution}\n            isTocExpanded={false}\n            background={background}\n          >\n            <Layout className=\"layout\">\n              <Switch location={location}>\n                <PrivateRoute\n                  exact\n                  path={INDEX_PATH}\n                  component={ResourceOverview}\n                  componentNoAccess={NoAccess}\n                  typeAccess={typeAccess}\n                />\n                <PrivateRoute\n                  exact\n                  path={RESOURCE_PATH}\n                  component={ResourceOverview}\n                  componentNoAccess={NoAccess}\n                  typeAccess={typeAccess}\n                />\n                <Route path=\"*\" exact component={NotFoundPage} />\n              </Switch>\n            </Layout>\n          </RouteTransition>\n        </ThemeProvider>\n      )}\n    />\n  );\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    resourceActions: bindActionCreators(resourceActions, dispatch),\n    userActions: bindActionCreators(userActions, dispatch)\n  };\n}\n\nconst connector = connect(null, mapDispatchToProps);\nexport default connector(Resource);\n"],"sourceRoot":""}